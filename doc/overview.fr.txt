Présentation générale d'XP Dojo
===============================

La pratique de l'eXtreme Programming amène des façons nouvelles de programmer, de collaborer et de communiquer. Les outils de développement existants répondent assez peu à ces besoins, tout en compliquant les choses avec de nombreuses fonctionnalités qui, dans le contexte de l'eXtreme Programming, sont superflues ou inadaptées.

L'objectif principal du projet XP Dojo est de fournir un outil simple et autonome spécifiquement adapté aux pratiques XP, notamment :

- la programmation pilotée par les tests unitaires et de recette;
- l'intégration continue;
- le remaniement (refactoring);
- le développement en tandem (pair programming).

En outre, le projet explore des façons nouvelles de pratiquer XP nécessitant des outils spécifiques, par exemple :

- l'intégration instantanée;
- la collaboration à distance (cyberdojo).

Enfin, XP Dojo vise à faciliter l'adoption de l'eXtreme Programming en automatisant ou simplifiant la production d'informations plus traditionnelles (rapports, traçabilité, métriques...)


Vue d'ensemble
--------------

XP Dojo est un logiciel permettant de créer un espace virtuel dans lequel tous les participants d'un projet XP se rende pour travailler et collaborer. Il réunit le code, les tests, les scénarios et toute autre information concernant le projet, en offrant aux participants les moyens d'y travailler selon la méthode XP.

XP Dojo offre trois interfaces aux utilisateurs:

- l'interface graphique riche fournit la totalité des fonctionnalités et constitue un environnement de développement dédié à XP;
- une interface web, simplifiée, offrant un accès universel à un sous-ensemble de fonctionnalités;
- une interface Erlang, donc textuelle et entièrement scriptable, permettant dA fully scriptable, textual interface, which can be
  used by the team to specialize XP Dojo, and also
  allows some features to be used in conjunction with
  external tools (your favourite IDE, or your current
  source control tool, for example).

Initially, XP Dojo will support programming in Erlang
and C. We would like to extend it to other languages
but have no definite plans.

** Design philosophy

The role of XP Dojo is not to make decisions for you or
to enforce a process. It is to simplify rote tasks, and
to perform complex computations that enable programmers
to make better-informed decisions, to explore their
consequences, or reverse them.

It should be possible to use XP Dojo for ordinary,
non-XP programming!  However, Dojo should make XP so
easy, and its advantages so clear, that it is tempting
to follow the XP process.

** Most extreme features

XP Dojo is designed around test-driven development. For
example, the code browser automatically displays tests
side-by-side with the corresponding code. Writing a
test for a new function will automatically generate all
the boilerplate code for the module and function. The
tests are automatically and continuously run in the
background.

XP Dojo incorporates its own, revolutionary, revision
control system, which is completely designed for
Extreme Programming and can be completely transparent
to users.

Of course, XP Dojo enables pair programming, in ways
that are useful whether you are in the same room or on
the other side of the world.

** Overview of main stories

*** Pair programming

Choose from a list of connected users to become
someone's copilot.  Only the driver may modify the
code, but the copilot can see exactly what the driver
is doing (including the cursor position, the selection,
mouse movement, button presses etc.)

Either user may switch drivers.

The copilot may also browse other parts of the code
without affecting what the driver is doing.

A special "challenge-response" mode switches drivers
automatically every time the tests change status (from
green to red).

If you are not in the same room, activate voice
transmission.

Look at a graph representing how much or how recently
you have paired with the other members of the project.

*** Test driven development

The current status of the unit tests (green = pass,
yellow = not runnable, red = failures) is updated at
every keystroke.

The current status of the acceptance tests (n∞ of
passes, n∞ of regressions, n∞ waiting to pass) is
updated every time the unit tests are green.

Test code and application code is automatically
displayed side by side.

Create or modify a module or function by adding a
failing test. A stub is inferred from the test.

In the background, XP Dojo continuously performs
mutations on the code and warns the programmer if any
mutation did not cause a test to fail.

*** Refactoring

XP Dojo provides support for automatic or
computer-assisted refactoring.

*** Continuous integration

A development session is automatically created by any
change to the code or tests which result in a failed
unit test. As soon as all the unit tests pass again,
the changes are automatically committed and the session
is over.

XP Dojo interprets all changes to code as a refactoring
(i.e. a semantic, logical change, not a line-by-line
change). Each time a development session is committed,
its "semantic change list" can be automatically aplied
to all other active sessions, which are thus
automatically updated. Because the changes applied to
them are semantic, the result is always correct code.

XP Dojo extends continuous integration to continuous
deployment. Release packages are built automatically,
and acceptance tests are carried out using the latest
release package. Each time an additional acceptance
test passes, a release can be automatically deployed to
subscribed users. For Erlang applications, this can
result in automatic hot code update without
interrupting the application.

*** Collective code ownership

XP Dojo stores code as an abstract syntax tree, not as
source files, so code is automatically displayed
according to a unique (project-wide configurable)
style.

Look at a graph representing how much or how recently
you have worked in various parts of the code.

